// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? // @db.Text
  access_token       String? // @db.Text
  created_at         Int?
  expires_at         Int?
  secret_valid_until Int?
  token_type         String?
  scope              String?
  id_token           String? // @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  discord       String?
  github        String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]     @relation(name: "author")
  applications  Application[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Project listing
model Project {
  id           String        @id @default(cuid())
  title        String
  description  String?
  createdAt    DateTime      @default(now())
  technologies String
  applications Application[]
  authorId     String
  author       User          @relation(name: "author", fields: [authorId], references: [id], onDelete: Cascade)
}

model Application {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  applicantId String
  projectId   String
  applicant   User     @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
